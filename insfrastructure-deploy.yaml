AWSTemplateFormatVersion: 2010-09-09

Parameters:

  EnvironmentName:
    Type: String

  VpcCIDR:
    Type: String
    Default: 172.16.0.0/16
  
  PublicSubnet1CIDR:
    Type: String
    Default: 172.16.1.0/24

  PublicSubnet2CIDR:
    Type: String
    Default: 172.16.2.0/24
  
  PrivateSubnet1CIDR:
    Type: String
    Default: 172.16.3.0/24

  PrivateSubnet2CIDR:
    Type: String
    Default: 172.16.4.0/24
  
  PrivateSubnet3CIDR:
    Type: String
    Default: 172.16.5.0/24

  PrivateSubnet4CIDR:
    Type: String
    Default: 172.16.6.0/24

  PrivateSubnet5CIDR:
    Type: String
    Default: 172.16.7.0/24

  EFSParameterName:
    Type: String

  InstanceType:
    Description: Compute instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large]

Resources:
  prodVPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref prodVPC
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone:  !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone:  !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ3)-abc

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet5CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn: [PrivateSubnet4, PrivateSubnet5]
    Properties:
      DBSubnetGroupDescription: Subnet group for MySQL DB
      DBSubnetGroupName: !Sub ${EnvironmentName}-DbSubGroup
      SubnetIds:
      - !Ref PrivateSubnet4
      - !Ref PrivateSubnet5

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref prodVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref prodVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet4

  PrivateSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet5

  HTTPIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: prodVPC
    Properties:
      GroupName: !Sub ${EnvironmentName}-SecurityGroup
      GroupDescription: "Security group with HTTP ingress rule"
      VpcId: !Ref prodVPC

  HTTPIngressSecurityGroupRule1:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: HTTPIngressSecurityGroup
    Properties:
      CidrIp: 0.0.0.0/0
      Description: "Allow HTTP"
      GroupId: !Ref HTTPIngressSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  HTTPIngressSecurityGroupRule2:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: HTTPIngressSecurityGroup
    Properties:
      CidrIp: 0.0.0.0/0
      Description: "Allow HTTPS"
      GroupId: !Ref HTTPIngressSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  DBIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: prodVPC
    Properties:
      GroupName: !Sub ${EnvironmentName}-Db-SG
      GroupDescription: "Security Group for DB ingress rule"
      VpcId: !Ref prodVPC

  DBIngressSecurityGroupRule1:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: DBIngressSecurityGroup
    Properties:
      CidrIp: 172.16.3.0/24
      Description: "Allow MySQL port 3306 for AZ1"
      GroupId: !Ref DBIngressSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
  
  DBIngressSecurityGroupRule2:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: DBIngressSecurityGroup
    Properties:
      CidrIp: 172.16.4.0/24
      Description: "Allow MySQL port 3306 for AZ2"
      GroupId: !Ref DBIngressSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306

  DBIngressSecurityGroupRule3:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: DBIngressSecurityGroup
    Properties:
      CidrIp: 172.16.5.0/24
      Description: "Allow MySQL port 3306 for AZ3"
      GroupId: !Ref DBIngressSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306

  MyEFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: MyEFS

  MySSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Description: Parameter storing the ID of MyEFSFileSystem
      Name: !Sub ${EFSParameterName}
      Value: !GetAtt MyEFSFileSystem.FileSystemId

  myWebServProd:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: 
    - HTTPIngressSecurityGroup
    - DBIngressSecurityGroup
    - MyEFSFileSystem
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-myWebServProd
      LaunchTemplateData:
        ImageId: ami-02473cbbc15e11a1a
        InstanceType: !Ref InstanceType
        NetworkInterfaces:
         - DeviceIndex: 0
           AssociatePublicIpAddress: false
           Groups:
            - !Ref HTTPIngressSecurityGroup
        UserData: 
          Fn::Base64: 
            !Sub |
            #!/bin/bash -xe
            sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport \
            $(aws ssm get-parameter --name "${EFSParameterName}" --region ${AWS::Region} --query "Parameter.Value" --output text).efs.${AWS::Region}.amazonaws.com:/ /var/www/html

        
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      Name: !Sub ${EnvironmentName}-LoadBalancer
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
       - !GetAtt HTTPIngressSecurityGroup.GroupId
      Subnets:
       - !Ref PublicSubnet1
       - !Ref PublicSubnet2
      Tags:
       - Key: Name
         Value: !Ref EnvironmentName

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: !Sub ${EnvironmentName}-TargetGroup
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      Port: 80
      Protocol: HTTP
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      TargetType: instance
      Matcher: 
        HttpCode: "200"
      VpcId: !Ref prodVPC

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: TargetGroup
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref TargetGroup

  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: myWebServProd
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-AutoScaleGroup
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 3
      LaunchTemplate: 
        LaunchTemplateId: !Ref myWebServProd
        Version: !GetAtt myWebServProd.LatestVersionNumber
      TargetGroupARNs: 
       - !Ref TargetGroup
      VPCZoneIdentifier:
       - !Ref PrivateSubnet1
       - !Ref PrivateSubnet2
       - !Ref PrivateSubnet3

Outputs:
  prodVPC:
    Description: A reference to the created VPC
    Value: !Ref prodVPC

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  PrivateSubnet3:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateSubnet3

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
  
  HTTPIngressSecurityGroup:
    Description: A reference to the Security Group allowing HTTP only inbound
    Value: !Ref HTTPIngressSecurityGroup

  myWebServProd:
    Description: A reference to the Launch Template
    Value: !Ref myWebServProd

  myAutoScalingGroup:
    Description: A reference to the Auto Scaling Group
    Value: !Ref myAutoScalingGroup

  ApplicationLoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref ApplicationLoadBalancer

  LoadBalancerURL:
    Description: The URL of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName