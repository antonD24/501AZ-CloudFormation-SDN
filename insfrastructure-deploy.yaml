AWSTemplateFormatVersion: 2010-09-09
Description: Parent Template that contains the web server deployments alongside the nested stacks

Parameters:

  EnvironmentName:
    Type: String
    Default: 501Insfrastructurecdn

  BucketTemplate:
    Type: String
    Default: https://project-files-501.s3.eu-west-2.amazonaws.com/Scripts/nested_SDN_DIST.yaml
    Description: Link to SDN stack stored in S3
  
  BucketName:
    Type: String
    Default: s3-501az-video-files-store

  DevVpcTemplate:
    Type: String
    Default: https://project-files-501.s3.eu-west-2.amazonaws.com/Scripts/nested_DevVPC_Peering.yaml
    Description: Link to DEV VPC stack in S3

  devCIDR:
    Type: String
    Default: 172.17.0.0/24

  PublicDevCIDR:
    Type: String
    Default: 172.17.0.0/27

  PrivateDevCIDR:
    Type: String
    Default: 172.17.0.32/27

  AMIid:
    Type: String
    Default: ami-09b225b36edcf014f

  InstanceType:
    Description: Compute instance type
    Type: String
    Default: t2.medium
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large]

  DevInstanceType:
    Description: Compute instance type
    Type: String
    Default: t2.large
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large]

  OStype:
    Description: AMI options (ami-0e8d228ad90af673b - Ubuntu, ami-05bfeaa616a095c81 - Windows, ami-0acc77abdfc7ed5a6 - Amazon Linux)
    Type: String
    Default: ami-0e8d228ad90af673b
    AllowedValues: [ami-0e8d228ad90af673b, ami-05bfeaa616a095c81, ami-0acc77abdfc7ed5a6]

  VpcCIDR:
    Type: String
    Default: 172.16.0.0/16
  
  PublicSubnet1CIDR:
    Type: String
    Default: 172.16.0.0/24

  PublicSubnet2CIDR:
    Type: String
    Default: 172.16.1.0/24
  
  PrivateSubnet1CIDR:
    Type: String
    Default: 172.16.2.0/24

  PrivateSubnet2CIDR:
    Type: String
    Default: 172.16.3.0/24
  
  PrivateSubnet3CIDR:
    Type: String
    Default: 172.16.4.0/24

  PrivateSubnet4CIDR:
    Type: String
    Default: 172.16.5.0/24

  PrivateSubnet5CIDR:
    Type: String
    Default: 172.16.6.0/24
  
  MasterUsername:
    Type: String
    Description: DB Username

  MasterUserPassword:
    Type: String

  dbname:
    Type: String

Resources:

  SDNStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref BucketTemplate
      Parameters:
        BucketName: !Ref BucketName

  prodVPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-Prod
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref prodVPC
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone:  !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone:  !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ3)

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref prodVPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet5CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PROD NAT EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PROD NAT-AZ1

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn: [PrivateSubnet4, PrivateSubnet5]
    Properties:
      DBSubnetGroupDescription: Subnet group for MySQL DB
      DBSubnetGroupName: !Sub ${EnvironmentName}-DbSubGroup
      SubnetIds:
      - !Ref PrivateSubnet4
      - !Ref PrivateSubnet5

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref prodVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ProdPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref prodVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProdPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdPrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdPrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdPrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdPrivateRouteTable
      SubnetId: !Ref PrivateSubnet4

  PrivateSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdPrivateRouteTable
      SubnetId: !Ref PrivateSubnet5

  HTTPIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-HTTP-WEB-SG
      GroupDescription: "Security group with HTTP ingress rule"
      Tags:
        - Key: Name
          Value: !Sub PROD-${EnvironmentName}-HTTP-SG
      VpcId: !Ref prodVPC
      SecurityGroupIngress:

        - CidrIp: 0.0.0.0/0
          Description: "Allow HTTP for web servers"
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

        - CidrIp: 0.0.0.0/0
          Description: "Allow HTTPS"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-EFS-WEB-SG
      GroupDescription: Instance to EFS Mount Access
      Tags:
        - Key: Name
          Value: !Sub PROD-${EnvironmentName}-EFS-SG
      VpcId: !Ref prodVPC
      SecurityGroupIngress:
        - CidrIp: 172.16.2.0/24
          Description: "Allow EFS traffic for AZ1"
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049

        - CidrIp: 172.16.3.0/24
          Description: "Allow EFS traffic for AZ2"
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049

        - CidrIp: 172.16.4.0/24
          Description: "Allow EFS traffic for AZ3"
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          
        - CidrIp: 172.17.0.32/27
          Description: "Allow EFS traffic for DEV"
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049

  DBIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-Db-SG
      GroupDescription: "Security Group for DB ingress from RDS"
      Tags:
        - Key: Name
          Value: !Sub PROD-${EnvironmentName}-RDS-TO-WEB
      VpcId: !Ref prodVPC
      SecurityGroupIngress:

        - CidrIp: 172.16.5.0/24
          Description: "Allow MySQL port 3306 for AZ1"
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
  
        - CidrIp: 172.16.6.0/24
          Description: "Allow MySQL port 3306 for AZ2"
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306

  DBEgressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-Egress-Db-SG
      GroupDescription: "Security Group for DB egress to Web Servers"
      Tags:
        - Key: Name
          Value: !Sub PROD-${EnvironmentName}-WEB-TO-RDS
      VpcId: !Ref prodVPC
      SecurityGroupIngress:

        - CidrIp: 172.16.2.0/24
          Description: "Allow MySQL port 3306 for AZ1"
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
  
        - CidrIp: 172.16.3.0/24
          Description: "Allow MySQL port 3306 for AZ2"
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306

 
        - CidrIp: 172.16.4.0/24
          Description: "Allow MySQL port 3306 for AZ3"
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306

        - CidrIp: 172.17.0.32/27
          Description: "Allow MySQL port 3306 for DEV Instance"
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306

  MyEFSFileSystem:
    Type: AWS::EFS::FileSystem
    DependsOn: 
    - prodVPC
    Properties:
      FileSystemTags:
        - Key: Name
          Value: MyEFS

  MountTarget1:
    Type: AWS::EFS::MountTarget
    DependsOn:
    - MyEFSFileSystem
    - EfsSecurityGroup
    Properties:
      FileSystemId: !Ref MyEFSFileSystem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
      - !Ref EfsSecurityGroup
  MountTarget2:
    Type: AWS::EFS::MountTarget
    DependsOn:
    - MyEFSFileSystem
    - EfsSecurityGroup
    Properties:
      FileSystemId: !Ref MyEFSFileSystem
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
      - !Ref EfsSecurityGroup
  MountTarget3:
    Type: AWS::EFS::MountTarget
    DependsOn:
    - MyEFSFileSystem
    - EfsSecurityGroup
    Properties:
      FileSystemId: !Ref MyEFSFileSystem
      SubnetId: !Ref PrivateSubnet3
      SecurityGroups:
      - !Ref EfsSecurityGroup

  ## Database with read Replica
  
  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub ${EnvironmentName}-database
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: "MYSQL"
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      BackupRetentionPeriod: 7
      MultiAZ: false
      EngineVersion: 8.0.35
      AutoMinorVersionUpgrade: false
      PubliclyAccessible: false
      StorageType: gp2
      Port: 3306
      StorageEncrypted: true
      CopyTagsToSnapshot: true
      EnableIAMDatabaseAuthentication: false
      EnablePerformanceInsights: false
      DeletionProtection: false
      DBSubnetGroupName: !Ref DbSubnetGroup
      VPCSecurityGroups: 
      - !Ref DBEgressSecurityGroup
      MaxAllocatedStorage: 50
      Tags: 

        - Key: Name
          Value: database-1

  MURLssm:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Description: Parameter storing the RDS instance Endpoint
      Name: /dev/dbMasterUrl
      Value: !GetAtt [RDS, Endpoint.Address]

  dbName:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Description: Parameter storing the RDS instance identifier
      Name: /dev/dbName
      Value: !Ref dbname

  dbUser:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Description: Parameter storing the RDS instance Username
      Name: /dev/dbUser
      Value: !Ref MasterUsername

  dbPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Description: Parameter storing the RDS instance Password
      Name: /dev/dbPassword
      Value: !Ref MasterUserPassword

  RDSreplica:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: !Sub ${EnvironmentName}-db-replica
      SourceDBInstanceIdentifier: !Ref RDS
      DBInstanceClass: "db.t3.micro"
      Engine: "MYSQL"
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref DBEgressSecurityGroup
      

  RRURLssm:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Description: Parameter storing the RDS instance Endpoint
      Name: /dev/dbRRUrl
      Value: !GetAtt [RDSreplica, Endpoint.Address]

    

  ## Developer Envrionment VPC

  DevStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
    - prodVPC
    - MyEFSFileSystem
    - MountTarget1
    - MountTarget2
    - MountTarget3
    Properties:
      TemplateURL: !Ref DevVpcTemplate
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        devCIDR: !Ref devCIDR
        PublicDevCIDR: !Ref PublicDevCIDR
        PrivateDevCIDR: !Ref PrivateDevCIDR
        AMIid: !Ref AMIid
        DevInstanceType: !Ref DevInstanceType
        myEFSID: !Ref MyEFSFileSystem
        myprodVPC: !Ref prodVPC
        myProdPrivateRouteTable: !Ref ProdPrivateRouteTable
        OStype: !Ref OStype
    

  WebKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: WebKey

  

  WebEfsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: EFS-read
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - elasticfilesystem:ClientMount
                - elasticfilesystem:DescribeMountTargets
                Resource: "*"
        - PolicyName: SSM-read
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - ssm:Describe*
                - ssm:Get*
                - ssm:List*
                Resource: "*"
        - PolicyName: RDS-read
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - rds:Describe*
                - rds:ListTagsForResource
                - ec2:DescribeAccountAttributes
                - ec2:DescribeAvailabilityZones
                - ec2:DescribeInternetGateways
                - ec2:DescribeSecurityGroups
                - ec2:DescribeSubnets
                - ec2:DescribeVpcAttribute
                - ec2:DescribeVpcs
                Resource: "*"
              - Effect: Allow
                Action:
                - cloudwatch:GetMetricStatistics
                - cloudwatch:ListMetrics
                - cloudwatch:GetMetricData
                - logs:DescribeLogStreams
                - logs:GetLogEvents
                - devops-guru:GetResourceCollection
                Resource: "*"
              - Action:
                - devops-guru:SearchInsights
                - devops-guru:ListAnomaliesForInsight
                Effect: Allow
                Resource: "*"
                Condition:
                  ForAllValues:StringEquals:
                    devops-guru:ServiceNames:
                    - RDS
                  'Null':
                    devops-guru:ServiceNames: 'false'


  WebInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WebEfsRole
    
  
  myWebServProd:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: 
    - WebInstanceProfile
    - WebKeyPair
    - HTTPIngressSecurityGroup
    - DBIngressSecurityGroup
    - MyEFSFileSystem
    - MountTarget1
    - MountTarget2
    - MountTarget3
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-myWebServProd
      LaunchTemplateData:
        ImageId: !Ref  AMIid
        InstanceType: !Ref InstanceType
        KeyName: !Ref WebKeyPair
        IamInstanceProfile: 
          Arn: !GetAtt  WebInstanceProfile.Arn
        MetadataOptions:
          HttpTokens: optional
        NetworkInterfaces:
         - DeviceIndex: 0
           AssociatePublicIpAddress: false
           Groups:
            - !Ref HTTPIngressSecurityGroup
            - !Ref EfsSecurityGroup
            - !Ref DBIngressSecurityGroup
        UserData: 
          Fn::Base64: 
            !Sub |
              #!/bin/bash -xe

              mkdir -p "/var/www/html"

              echo "${MyEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/html nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0" >> /etc/fstab

              mount -a
        
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      Name: !Sub ${EnvironmentName}-LoadBalancer
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
       - !GetAtt HTTPIngressSecurityGroup.GroupId
      Subnets:
       - !Ref PublicSubnet1
       - !Ref PublicSubnet2
      Tags:
       - Key: Name
         Value: !Ref EnvironmentName

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: !Sub ${EnvironmentName}-TargetGroup
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Matcher: 
        HttpCode: "200"
      VpcId: !Ref prodVPC

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: TargetGroup
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref TargetGroup

  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: myWebServProd
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-AutoScaleGroup
      DesiredCapacity: 3
      MinSize: 2
      MaxSize: 3
      LaunchTemplate: 
        LaunchTemplateId: !Ref myWebServProd
        Version: !GetAtt myWebServProd.LatestVersionNumber
      TargetGroupARNs: 
       - !Ref TargetGroup
      VPCZoneIdentifier:
       - !Ref PrivateSubnet1
       - !Ref PrivateSubnet2
       - !Ref PrivateSubnet3

Outputs:

  myprodVPC:
    Description: A reference to the created VPC
    Value: !Ref prodVPC
    Export:
      Name: prodVPC

  myProdPrivateRouteTable:
    Description: A reference to the created private table
    Value: !Ref ProdPrivateRouteTable
    Export:
      Name: ProdPrivateRouteTable

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  PrivateSubnet3:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateSubnet3

  PrivateSubnet4:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateSubnet3

  PrivateSubnet5:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateSubnet3

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
  
  HTTPIngressSecurityGroup:
    Description: A reference to the Security Group allowing HTTP only inbound
    Value: !Ref HTTPIngressSecurityGroup

  myEFSID:
    Description: The EFS ID
    Value: !Ref MyEFSFileSystem
    Export:
      Name: MyEFSFileSystem
  
  myWebServProd:
    Description: A reference to the Launch Template
    Value: !Ref myWebServProd

  myAutoScalingGroup:
    Description: A reference to the Auto Scaling Group
    Value: !Ref myAutoScalingGroup

  ApplicationLoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref ApplicationLoadBalancer

  LoadBalancerURL:
    Description: The URL of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  

  